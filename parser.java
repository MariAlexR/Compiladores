
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Apr 15 19:12:21 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun Apr 15 19:12:21 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\005\004\000\002\002\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\002\000\002\012\004" +
    "\000\002\012\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\004\000\002\035\004\000\002" +
    "\030\004\000\002\032\006\000\002\032\005\000\002\032" +
    "\003\000\002\010\004\000\002\007\007\000\002\007\005" +
    "\000\002\007\003\000\002\011\003\000\002\011\005\000" +
    "\002\011\004\000\002\037\003\000\002\037\003\000\002" +
    "\004\010\000\002\004\003\000\002\061\011\000\002\061" +
    "\011\000\002\061\005\000\002\061\012\000\002\061\010" +
    "\000\002\061\005\000\002\036\004\000\002\036\003\000" +
    "\002\053\005\000\002\053\004\000\002\053\004\000\002" +
    "\042\005\000\002\042\004\000\002\042\005\000\002\043" +
    "\004\000\002\043\004\000\002\044\005\000\002\044\005" +
    "\000\002\044\004\000\002\027\003\000\002\027\004\000" +
    "\002\027\004\000\002\027\005\000\002\027\003\000\002" +
    "\027\004\000\002\027\003\000\002\021\004\000\002\021" +
    "\003\000\002\031\004\000\002\031\003\000\002\022\004" +
    "\000\002\022\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\056" +
    "\005\000\002\056\005\000\002\056\004\000\002\056\005" +
    "\000\002\056\005\000\002\056\004\000\002\057\005\000" +
    "\002\057\004\000\002\017\006\000\002\017\006\000\002" +
    "\041\003\000\002\041\005\000\002\041\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\023\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\003\000\002\051\005\000\002\051\004\000\002" +
    "\051\003\000\002\051\003\000\002\051\005\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\033\006\000\002\033\003\000\002\033\005\000" +
    "\002\052\005\000\002\047\004\000\002\047\003\000\002" +
    "\046\005\000\002\046\003\000\002\034\003\000\002\025" +
    "\004\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\004\000" +
    "\002\024\006\000\002\024\006\000\002\024\005\000\002" +
    "\024\006\000\002\024\006\000\002\015\010\000\002\015" +
    "\007\000\002\015\007\000\002\015\006\000\002\015\006" +
    "\000\002\015\007\000\002\015\007\000\002\015\010\000" +
    "\002\020\004\000\002\020\007\000\002\020\006\000\002" +
    "\020\004\000\002\020\007\000\002\020\010\000\002\020" +
    "\006\000\002\020\007\000\002\020\006\000\002\020\007" +
    "\000\002\020\007\000\002\020\010\000\002\020\007\000" +
    "\002\020\004\000\002\040\004\000\002\040\004\000\002" +
    "\014\010\000\002\014\007\000\002\014\010\000\002\014" +
    "\007\000\002\014\007\000\002\014\010\000\002\055\004" +
    "\000\002\055\003\000\002\013\010\000\002\013\007\000" +
    "\002\013\007\000\002\013\010\000\002\013\006\000\002" +
    "\013\007\000\002\054\007\000\002\054\006\000\002\054" +
    "\006\000\002\054\005\000\002\054\007\000\002\054\007" +
    "\000\002\054\007\000\002\045\010\000\002\045\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\020\002\ufffd\003\015\011\004\013\010\015" +
    "\013\016\017\047\012\001\002\000\006\003\u013e\034\u0141" +
    "\001\002\000\004\002\u013d\001\002\000\016\002\uffe7\003" +
    "\uffe7\011\uffe7\015\uffe7\016\uffe7\047\uffe7\001\002\000\016" +
    "\002\ufff8\003\ufff8\011\ufff8\015\ufff8\016\ufff8\047\ufff8\001" +
    "\002\000\016\002\ufffe\003\015\011\004\015\013\016\017" +
    "\047\012\001\002\000\004\002\uffff\001\002\000\004\034" +
    "\u0125\001\002\000\004\034\u011a\001\002\000\004\013\u0119" +
    "\001\002\000\004\013\u0118\001\002\000\016\002\ufffb\003" +
    "\015\011\004\015\013\016\017\047\012\001\002\000\006" +
    "\003\021\034\022\001\002\000\016\002\ufff9\003\ufff9\011" +
    "\ufff9\015\ufff9\016\ufff9\047\ufff9\001\002\000\004\013\u0116" +
    "\001\002\000\006\003\024\005\023\001\002\000\010\003" +
    "\u0100\006\u0101\014\377\001\002\000\022\002\uffe1\003\uffe1" +
    "\006\366\011\uffe1\013\367\015\uffe1\016\uffe1\047\uffe1\001" +
    "\002\000\006\003\027\010\026\001\002\000\006\034\364" +
    "\046\365\001\002\000\004\013\uffdf\001\002\000\004\013" +
    "\031\001\002\000\030\003\057\004\053\011\004\021\044" +
    "\025\040\026\061\034\041\036\046\037\037\040\033\050" +
    "\032\001\002\000\010\003\357\015\356\016\360\001\002" +
    "\000\006\003\353\034\230\001\002\000\004\017\346\001" +
    "\002\000\036\003\uffc7\004\053\020\uffc7\021\044\023\uffc7" +
    "\024\uffc7\025\uffc7\026\061\027\uffc7\034\041\036\046\037" +
    "\037\040\033\050\uffc7\001\002\000\036\003\uffc4\004\uffc4" +
    "\020\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\050\uffc4\001\002" +
    "\000\010\003\341\034\230\052\070\001\002\000\004\016" +
    "\337\001\002\000\012\003\336\005\107\017\uffb4\051\233" +
    "\001\002\000\020\003\uffd3\020\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\027\uffd3\050\032\001\002\000\004\025\332\001\002" +
    "\000\022\003\240\005\101\031\071\032\072\033\075\034" +
    "\104\052\070\053\102\001\002\000\036\003\uffc3\004\uffc3" +
    "\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\050\uffc3\001\002" +
    "\000\010\003\227\034\230\052\070\001\002\000\036\003" +
    "\uffcf\004\053\020\uffcf\021\044\023\uffcf\024\uffcf\025\uffcf" +
    "\026\061\027\uffcf\034\041\036\046\037\037\040\033\050" +
    "\032\001\002\000\036\003\uffc5\004\uffc5\020\uffc5\021\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\034\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\050\uffc5\001\002\000\004\013\222" +
    "\001\002\000\040\003\uffcb\004\uffcb\011\004\020\uffcb\021" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\034\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\050\uffcb\001\002\000\006\003" +
    "\175\030\176\001\002\000\016\003\uffcd\020\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\027\uffcd\001\002\000\004\013\174\001" +
    "\002\000\004\013\173\001\002\000\004\013\172\001\002" +
    "\000\036\003\uffc6\004\uffc6\020\uffc6\021\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\034\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\050\uffc6\001\002\000\006\003\064\034\066\001" +
    "\002\000\036\003\uffc1\004\uffc1\020\uffc1\021\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\034\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\050\uffc1\001\002\000\036\003\uffc0\004\uffc0" +
    "\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\050\uffc0\001\002" +
    "\000\004\013\164\001\002\000\004\013\154\001\002\000" +
    "\004\017\067\001\002\000\024\003\100\005\101\007\073" +
    "\031\071\032\072\033\075\034\104\052\070\053\102\001" +
    "\002\000\032\006\uff9f\007\uff9f\012\uff9f\013\uff9f\017\uff9f" +
    "\022\uff9f\035\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\054" +
    "\150\001\002\000\030\006\uffa7\007\uffa7\012\uffa7\013\uffa7" +
    "\017\uffa7\022\uffa7\035\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\001\002\000\030\006\uffa4\007\uffa4\012\uffa4\013\uffa4" +
    "\017\uffa4\022\uffa4\035\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\001\002\000\004\003\147\001\002\000\022\006\uffaf" +
    "\007\uffaf\012\uffaf\013\uffaf\017\uffaf\022\uffaf\043\uffaf\044" +
    "\uffaf\001\002\000\030\006\uffa3\007\uffa3\012\uffa3\013\uffa3" +
    "\017\uffa3\022\uffa3\035\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\001\002\000\012\007\144\017\117\043\115\044\121" +
    "\001\002\000\030\006\uffaa\007\uffaa\012\uffaa\013\uffaa\017" +
    "\uffaa\022\uffaa\035\136\041\140\042\137\043\uffaa\044\uffaa" +
    "\001\002\000\006\007\133\013\uff62\001\002\000\020\005" +
    "\101\031\071\032\072\033\075\034\104\052\070\053\102" +
    "\001\002\000\020\005\101\031\071\032\072\033\075\034" +
    "\104\052\070\053\102\001\002\000\030\006\uffa1\007\uffa1" +
    "\012\uffa1\013\uffa1\017\uffa1\022\uffa1\035\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\001\002\000\034\005\107\006\uffa6" +
    "\007\uffa6\012\uffa6\013\uffa6\017\uffa6\022\uffa6\035\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\051\106\001\002\000\030" +
    "\006\uffa2\007\uffa2\012\uffa2\013\uffa2\017\uffa2\022\uffa2\035" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\001\002\000\004" +
    "\034\127\001\002\000\022\005\101\006\110\031\071\032" +
    "\072\033\075\034\104\052\070\053\102\001\002\000\030" +
    "\006\uff98\007\uff98\012\uff98\013\uff98\017\uff98\022\uff98\035" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\001\002\000\014" +
    "\006\110\012\120\017\117\043\115\044\121\001\002\000" +
    "\030\006\uff9d\007\uff9d\012\uff9d\013\uff9d\017\uff9d\022\uff9d" +
    "\035\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\001\002\000" +
    "\030\006\uff9b\007\uff9b\012\uff9b\013\uff9b\017\uff9b\022\uff9b" +
    "\035\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\001\002\000" +
    "\030\006\uff9c\007\uff9c\012\uff9c\013\uff9c\017\uff9c\022\uff9c" +
    "\035\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\001\002\000" +
    "\020\005\101\031\071\032\072\033\075\034\104\052\070" +
    "\053\102\001\002\000\030\006\uff99\007\uff99\012\uff99\013" +
    "\uff99\017\uff99\022\uff99\035\uff99\041\uff99\042\uff99\043\uff99" +
    "\044\uff99\001\002\000\020\005\101\031\071\032\072\033" +
    "\075\034\104\052\070\053\102\001\002\000\020\005\101" +
    "\031\071\032\072\033\075\034\104\052\070\053\102\001" +
    "\002\000\020\005\101\031\071\032\072\033\075\034\104" +
    "\052\070\053\102\001\002\000\022\006\uffb0\007\uffb0\012" +
    "\uffb0\013\uffb0\017\uffb0\022\uffb0\043\uffb0\044\uffb0\001\002" +
    "\000\014\006\110\012\120\017\117\043\115\044\121\001" +
    "\002\000\030\006\uff9a\007\uff9a\012\uff9a\013\uff9a\017\uff9a" +
    "\022\uff9a\035\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\001" +
    "\002\000\022\006\uffae\007\uffae\012\uffae\013\uffae\017\uffae" +
    "\022\uffae\043\uffae\044\uffae\001\002\000\022\006\uffb1\007" +
    "\uffb1\012\uffb1\013\uffb1\017\uffb1\022\uffb1\043\uffb1\044\uffb1" +
    "\001\002\000\030\006\uffa5\007\uffa5\012\uffa5\013\uffa5\017" +
    "\uffa5\022\uffa5\035\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\001\002\000\030\006\uffa8\007\uffa8\012\uffa8\013\uffa8\017" +
    "\uffa8\022\uffa8\035\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\001\002\000\012\006\132\017\117\043\115\044\121\001" +
    "\002\000\030\006\uffa9\007\uffa9\012\uffa9\013\uffa9\017\uffa9" +
    "\022\uffa9\035\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\001" +
    "\002\000\024\003\135\005\101\013\uff63\031\071\032\072" +
    "\033\075\034\104\052\070\053\102\001\002\000\012\013" +
    "\uff5f\017\117\043\115\044\121\001\002\000\004\013\uff61" +
    "\001\002\000\020\005\101\031\071\032\072\033\075\034" +
    "\104\052\070\053\102\001\002\000\020\005\101\031\071" +
    "\032\072\033\075\034\104\052\070\053\102\001\002\000" +
    "\020\005\101\031\071\032\072\033\075\034\104\052\070" +
    "\053\102\001\002\000\022\006\uffad\007\uffad\012\uffad\013" +
    "\uffad\017\uffad\022\uffad\043\uffad\044\uffad\001\002\000\022" +
    "\006\uffac\007\uffac\012\uffac\013\uffac\017\uffac\022\uffac\043" +
    "\uffac\044\uffac\001\002\000\022\006\uffab\007\uffab\012\uffab" +
    "\013\uffab\017\uffab\022\uffab\043\uffab\044\uffab\001\002\000" +
    "\022\003\146\005\101\031\071\032\072\033\075\034\104" +
    "\052\070\053\102\001\002\000\012\013\uff65\017\117\043" +
    "\115\044\121\001\002\000\004\013\uff60\001\002\000\004" +
    "\013\uff64\001\002\000\006\003\151\013\152\001\002\000" +
    "\030\006\uff9e\007\uff9e\012\uff9e\013\uff9e\017\uff9e\022\uff9e" +
    "\035\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\001\002\000" +
    "\004\052\070\001\002\000\030\006\uffa0\007\uffa0\012\uffa0" +
    "\013\uffa0\017\uffa0\022\uffa0\035\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\001\002\000\030\003\156\004\053\011\004" +
    "\021\044\026\061\027\157\034\041\036\046\037\037\040" +
    "\033\050\032\001\002\000\006\003\161\027\162\001\002" +
    "\000\036\003\uff67\004\uff67\020\uff67\021\uff67\023\uff67\024" +
    "\uff67\025\uff67\026\uff67\027\uff67\034\uff67\036\uff67\037\uff67" +
    "\040\uff67\050\uff67\001\002\000\004\013\160\001\002\000" +
    "\036\003\uff6a\004\uff6a\020\uff6a\021\uff6a\023\uff6a\024\uff6a" +
    "\025\uff6a\026\uff6a\027\uff6a\034\uff6a\036\uff6a\037\uff6a\040" +
    "\uff6a\050\uff6a\001\002\000\036\003\uff66\004\uff66\020\uff66" +
    "\021\uff66\023\uff66\024\uff66\025\uff66\026\uff66\027\uff66\034" +
    "\uff66\036\uff66\037\uff66\040\uff66\050\uff66\001\002\000\004" +
    "\013\163\001\002\000\036\003\uff6b\004\uff6b\020\uff6b\021" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\034\uff6b" +
    "\036\uff6b\037\uff6b\040\uff6b\050\uff6b\001\002\000\026\004" +
    "\053\011\004\021\044\026\061\027\166\034\041\036\046" +
    "\037\037\040\033\050\032\001\002\000\004\027\170\001" +
    "\002\000\004\013\167\001\002\000\036\003\uff69\004\uff69" +
    "\020\uff69\021\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027" +
    "\uff69\034\uff69\036\uff69\037\uff69\040\uff69\050\uff69\001\002" +
    "\000\004\013\171\001\002\000\036\003\uff68\004\uff68\020" +
    "\uff68\021\uff68\023\uff68\024\uff68\025\uff68\026\uff68\027\uff68" +
    "\034\uff68\036\uff68\037\uff68\040\uff68\050\uff68\001\002\000" +
    "\016\002\uffe6\003\uffe6\011\uffe6\015\uffe6\016\uffe6\047\uffe6" +
    "\001\002\000\036\003\uffc2\004\uffc2\020\uffc2\021\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\034\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\050\uffc2\001\002\000\040\003\ufff6\004" +
    "\ufff6\011\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\050" +
    "\ufff6\001\002\000\020\005\101\031\071\032\072\033\075" +
    "\034\104\052\070\053\102\001\002\000\022\003\200\005" +
    "\101\031\071\032\072\033\075\034\104\052\070\053\102" +
    "\001\002\000\012\013\210\017\117\043\115\044\121\001" +
    "\002\000\004\013\201\001\002\000\030\003\205\004\053" +
    "\011\004\020\202\021\044\026\061\034\041\036\046\037" +
    "\037\040\033\050\032\001\002\000\004\013\207\001\002" +
    "\000\006\003\205\020\202\001\002\000\036\003\uff6f\004" +
    "\uff6f\020\uff6f\021\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f" +
    "\027\uff6f\034\uff6f\036\uff6f\037\uff6f\040\uff6f\050\uff6f\001" +
    "\002\000\036\003\uff6c\004\uff6c\020\uff6c\021\uff6c\023\uff6c" +
    "\024\uff6c\025\uff6c\026\uff6c\027\uff6c\034\uff6c\036\uff6c\037" +
    "\uff6c\040\uff6c\050\uff6c\001\002\000\036\003\uff6e\004\uff6e" +
    "\020\uff6e\021\uff6e\023\uff6e\024\uff6e\025\uff6e\026\uff6e\027" +
    "\uff6e\034\uff6e\036\uff6e\037\uff6e\040\uff6e\050\uff6e\001\002" +
    "\000\036\003\uff6d\004\uff6d\020\uff6d\021\uff6d\023\uff6d\024" +
    "\uff6d\025\uff6d\026\uff6d\027\uff6d\034\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\050\uff6d\001\002\000\030\003\205\004\053\011" +
    "\004\020\202\021\044\026\061\034\041\036\046\037\037" +
    "\040\033\050\032\001\002\000\006\003\205\020\202\001" +
    "\002\000\036\003\uff72\004\uff72\020\uff72\021\uff72\023\uff72" +
    "\024\uff72\025\uff72\026\uff72\027\uff72\034\uff72\036\uff72\037" +
    "\uff72\040\uff72\050\uff72\001\002\000\036\003\uff73\004\uff73" +
    "\020\uff73\021\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027" +
    "\uff73\034\uff73\036\uff73\037\uff73\040\uff73\050\uff73\001\002" +
    "\000\012\013\215\017\117\043\115\044\121\001\002\000" +
    "\030\003\205\004\053\011\004\020\202\021\044\026\061" +
    "\034\041\036\046\037\037\040\033\050\032\001\002\000" +
    "\006\003\205\020\202\001\002\000\036\003\uff70\004\uff70" +
    "\020\uff70\021\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027" +
    "\uff70\034\uff70\036\uff70\037\uff70\040\uff70\050\uff70\001\002" +
    "\000\036\003\uff71\004\uff71\020\uff71\021\uff71\023\uff71\024" +
    "\uff71\025\uff71\026\uff71\027\uff71\034\uff71\036\uff71\037\uff71" +
    "\040\uff71\050\uff71\001\002\000\036\003\uffcc\004\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\034\uffcc\036\uffcc\037\uffcc\040\uffcc\050\uffcc\001\002\000" +
    "\016\002\uffe5\003\uffe5\011\uffe5\015\uffe5\016\uffe5\047\uffe5" +
    "\001\002\000\020\003\uffd1\020\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\027\uffd1\050\032\001\002\000\016\003\uffce\020\uffce" +
    "\023\uffce\024\uffce\025\uffce\027\uffce\001\002\000\016\003" +
    "\uffd0\020\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\001\002" +
    "\000\004\013\236\001\002\000\036\003\uffbc\004\uffbc\020" +
    "\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\034\uffbc\036\uffbc\037\uffbc\040\uffbc\050\uffbc\001\002\000" +
    "\006\013\uffb4\051\233\001\002\000\004\013\232\001\002" +
    "\000\036\003\uffbd\004\uffbd\020\uffbd\021\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\034\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\050\uffbd\001\002\000\006\003\234\034\235\001" +
    "\002\000\006\013\uffb2\017\uffb2\001\002\000\006\013\uffb3" +
    "\017\uffb3\001\002\000\036\003\uffbe\004\uffbe\020\uffbe\021" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\034\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\050\uffbe\001\002\000\014\013" +
    "\322\017\117\022\321\043\115\044\121\001\002\000\006" +
    "\013\242\022\241\001\002\000\004\013\315\001\002\000" +
    "\034\003\251\004\053\011\004\021\044\023\243\024\250" +
    "\025\244\026\061\034\041\036\046\037\037\040\033\050" +
    "\032\001\002\000\006\003\303\013\304\001\002\000\006" +
    "\003\301\021\302\001\002\000\004\013\300\001\002\000" +
    "\012\003\251\023\243\024\250\025\244\001\002\000\036" +
    "\003\uff87\004\uff87\020\uff87\021\uff87\023\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\034\uff87\036\uff87\037\uff87\040\uff87" +
    "\050\uff87\001\002\000\022\003\254\005\101\031\071\032" +
    "\072\033\075\034\104\052\070\053\102\001\002\000\004" +
    "\025\244\001\002\000\036\003\uff76\004\uff76\020\uff76\021" +
    "\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76\034\uff76" +
    "\036\uff76\037\uff76\040\uff76\050\uff76\001\002\000\014\013" +
    "\267\017\117\022\266\043\115\044\121\001\002\000\006" +
    "\013\256\022\255\001\002\000\004\013\262\001\002\000" +
    "\034\003\251\004\053\011\004\021\044\023\243\024\250" +
    "\025\244\026\061\034\041\036\046\037\037\040\033\050" +
    "\032\001\002\000\012\003\251\023\243\024\250\025\244" +
    "\001\002\000\036\003\uff7b\004\uff7b\020\uff7b\021\uff7b\023" +
    "\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\034\uff7b\036\uff7b" +
    "\037\uff7b\040\uff7b\050\uff7b\001\002\000\036\003\uff79\004" +
    "\uff79\020\uff79\021\uff79\023\uff79\024\uff79\025\uff79\026\uff79" +
    "\027\uff79\034\uff79\036\uff79\037\uff79\040\uff79\050\uff79\001" +
    "\002\000\034\003\251\004\053\011\004\021\044\023\243" +
    "\024\250\025\244\026\061\034\041\036\046\037\037\040" +
    "\033\050\032\001\002\000\012\003\251\023\243\024\250" +
    "\025\244\001\002\000\036\003\uff7a\004\uff7a\020\uff7a\021" +
    "\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\034\uff7a" +
    "\036\uff7a\037\uff7a\040\uff7a\050\uff7a\001\002\000\036\003" +
    "\uff78\004\uff78\020\uff78\021\uff78\023\uff78\024\uff78\025\uff78" +
    "\026\uff78\027\uff78\034\uff78\036\uff78\037\uff78\040\uff78\050" +
    "\uff78\001\002\000\004\013\273\001\002\000\034\003\251" +
    "\004\053\011\004\021\044\023\243\024\250\025\244\026" +
    "\061\034\041\036\046\037\037\040\033\050\032\001\002" +
    "\000\012\003\251\023\243\024\250\025\244\001\002\000" +
    "\036\003\uff7d\004\uff7d\020\uff7d\021\uff7d\023\uff7d\024\uff7d" +
    "\025\uff7d\026\uff7d\027\uff7d\034\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\050\uff7d\001\002\000\036\003\uff7f\004\uff7f\020\uff7f" +
    "\021\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\034" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\050\uff7f\001\002\000\034" +
    "\003\251\004\053\011\004\021\044\023\243\024\250\025" +
    "\244\026\061\034\041\036\046\037\037\040\033\050\032" +
    "\001\002\000\012\003\251\023\243\024\250\025\244\001" +
    "\002\000\036\003\uff7c\004\uff7c\020\uff7c\021\uff7c\023\uff7c" +
    "\024\uff7c\025\uff7c\026\uff7c\027\uff7c\034\uff7c\036\uff7c\037" +
    "\uff7c\040\uff7c\050\uff7c\001\002\000\036\003\uff7e\004\uff7e" +
    "\020\uff7e\021\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027" +
    "\uff7e\034\uff7e\036\uff7e\037\uff7e\040\uff7e\050\uff7e\001\002" +
    "\000\036\003\uff85\004\uff85\020\uff85\021\uff85\023\uff85\024" +
    "\uff85\025\uff85\026\uff85\027\uff85\034\uff85\036\uff85\037\uff85" +
    "\040\uff85\050\uff85\001\002\000\036\003\uff83\004\uff83\020" +
    "\uff83\021\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
    "\034\uff83\036\uff83\037\uff83\040\uff83\050\uff83\001\002\000" +
    "\040\003\uff74\004\uff74\013\uff74\020\uff74\021\uff74\023\uff74" +
    "\024\uff74\025\uff74\026\uff74\027\uff74\034\uff74\036\uff74\037" +
    "\uff74\040\uff74\050\uff74\001\002\000\040\003\uff75\004\uff75" +
    "\013\uff75\020\uff75\021\uff75\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\027\uff75\034\uff75\036\uff75\037\uff75\040\uff75\050\uff75" +
    "\001\002\000\036\003\uff80\004\uff80\020\uff80\021\uff80\023" +
    "\uff80\024\uff80\025\uff80\026\uff80\027\uff80\034\uff80\036\uff80" +
    "\037\uff80\040\uff80\050\uff80\001\002\000\030\003\307\004" +
    "\053\011\004\021\044\025\244\026\061\034\041\036\046" +
    "\037\037\040\033\050\032\001\002\000\004\013\314\001" +
    "\002\000\004\025\244\001\002\000\004\025\244\001\002" +
    "\000\004\013\311\001\002\000\036\003\uff77\004\uff77\020" +
    "\uff77\021\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77" +
    "\034\uff77\036\uff77\037\uff77\040\uff77\050\uff77\001\002\000" +
    "\004\013\313\001\002\000\036\003\uff82\004\uff82\020\uff82" +
    "\021\uff82\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\034" +
    "\uff82\036\uff82\037\uff82\040\uff82\050\uff82\001\002\000\036" +
    "\003\uff81\004\uff81\020\uff81\021\uff81\023\uff81\024\uff81\025" +
    "\uff81\026\uff81\027\uff81\034\uff81\036\uff81\037\uff81\040\uff81" +
    "\050\uff81\001\002\000\034\003\251\004\053\011\004\021" +
    "\044\023\243\024\250\025\244\026\061\034\041\036\046" +
    "\037\037\040\033\050\032\001\002\000\012\003\251\023" +
    "\243\024\250\025\244\001\002\000\036\003\uff86\004\uff86" +
    "\020\uff86\021\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027" +
    "\uff86\034\uff86\036\uff86\037\uff86\040\uff86\050\uff86\001\002" +
    "\000\036\003\uff84\004\uff84\020\uff84\021\uff84\023\uff84\024" +
    "\uff84\025\uff84\026\uff84\027\uff84\034\uff84\036\uff84\037\uff84" +
    "\040\uff84\050\uff84\001\002\000\004\013\326\001\002\000" +
    "\034\003\251\004\053\011\004\021\044\023\243\024\250" +
    "\025\244\026\061\034\041\036\046\037\037\040\033\050" +
    "\032\001\002\000\012\003\251\023\243\024\250\025\244" +
    "\001\002\000\036\003\uff88\004\uff88\020\uff88\021\uff88\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\027\uff88\034\uff88\036\uff88" +
    "\037\uff88\040\uff88\050\uff88\001\002\000\036\003\uff8a\004" +
    "\uff8a\020\uff8a\021\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\034\uff8a\036\uff8a\037\uff8a\040\uff8a\050\uff8a\001" +
    "\002\000\034\003\251\004\053\011\004\021\044\023\243" +
    "\024\250\025\244\026\061\034\041\036\046\037\037\040" +
    "\033\050\032\001\002\000\012\003\251\023\243\024\250" +
    "\025\244\001\002\000\036\003\uff89\004\uff89\020\uff89\021" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\034\uff89" +
    "\036\uff89\037\uff89\040\uff89\050\uff89\001\002\000\036\003" +
    "\uff8b\004\uff8b\020\uff8b\021\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\034\uff8b\036\uff8b\037\uff8b\040\uff8b\050" +
    "\uff8b\001\002\000\006\003\333\016\334\001\002\000\004" +
    "\013\uffd9\001\002\000\004\013\uffdb\001\002\000\016\003" +
    "\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\001\002" +
    "\000\036\003\uffbf\004\uffbf\020\uffbf\021\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\034\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\050\uffbf\001\002\000\004\013\uffda\001\002\000" +
    "\004\013\344\001\002\000\036\003\uffb9\004\uffb9\020\uffb9" +
    "\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\034" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\050\uffb9\001\002\000\004" +
    "\013\343\001\002\000\036\003\uffbb\004\uffbb\020\uffbb\021" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\034\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\050\uffbb\001\002\000\036\003" +
    "\uffba\004\uffba\020\uffba\021\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\034\uffba\036\uffba\037\uffba\040\uffba\050" +
    "\uffba\001\002\000\020\003\uffc8\020\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\027\uffc8\050\uffc8\001\002\000\022\003\350\005" +
    "\101\031\071\032\072\033\075\034\104\052\070\053\102" +
    "\001\002\000\012\013\352\017\117\043\115\044\121\001" +
    "\002\000\004\013\351\001\002\000\036\003\uffb5\004\uffb5" +
    "\020\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5\050\uffb5\001\002" +
    "\000\036\003\uffb6\004\uffb6\020\uffb6\021\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\034\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\050\uffb6\001\002\000\036\003\uffb7\004\uffb7\020" +
    "\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\034\uffb7\036\uffb7\037\uffb7\040\uffb7\050\uffb7\001\002\000" +
    "\004\013\355\001\002\000\036\003\uffb8\004\uffb8\020\uffb8" +
    "\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\034" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\050\uffb8\001\002\000\004" +
    "\013\362\001\002\000\016\003\uffd4\020\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\027\uffd4\001\002\000\004\013\361\001\002" +
    "\000\016\003\uffd5\020\uffd5\023\uffd5\024\uffd5\025\uffd5\027" +
    "\uffd5\001\002\000\016\003\uffd6\020\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\027\uffd6\001\002\000\004\013\uffe0\001\002\000" +
    "\012\003\uffe9\006\uffe9\012\uffe9\013\uffe9\001\002\000\012" +
    "\003\uffea\006\uffea\012\uffea\013\uffea\001\002\000\006\003" +
    "\027\010\026\001\002\000\026\004\053\011\004\021\044" +
    "\025\040\026\061\034\041\036\046\037\037\040\033\050" +
    "\032\001\002\000\004\013\371\001\002\000\016\002\uffe2" +
    "\003\uffe2\011\uffe2\015\uffe2\016\uffe2\047\uffe2\001\002\000" +
    "\004\013\373\001\002\000\026\004\053\011\004\021\044" +
    "\025\040\026\061\034\041\036\046\037\037\040\033\050" +
    "\032\001\002\000\004\013\375\001\002\000\016\002\uffe3" +
    "\003\uffe3\011\uffe3\015\uffe3\016\uffe3\047\uffe3\001\002\000" +
    "\010\003\uff97\010\uff97\013\uff97\001\002\000\006\003\u010e" +
    "\034\u010f\001\002\000\012\003\uff94\010\uff94\013\uff94\034" +
    "\u010a\001\002\000\010\003\uff95\010\uff95\013\uff95\001\002" +
    "\000\010\003\u0103\006\u0105\012\u0104\001\002\000\004\006" +
    "\u010d\001\002\000\006\003\u0107\014\377\001\002\000\010" +
    "\003\uff92\010\uff92\013\uff92\001\002\000\010\003\uff96\010" +
    "\uff96\013\uff96\001\002\000\004\034\u010a\001\002\000\010" +
    "\003\u0103\006\u0105\012\u0104\001\002\000\010\003\uff93\010" +
    "\uff93\013\uff93\001\002\000\004\010\u010b\001\002\000\006" +
    "\034\364\046\365\001\002\000\010\003\uff8c\006\uff8c\012" +
    "\uff8c\001\002\000\010\003\uff91\010\uff91\013\uff91\001\002" +
    "\000\004\010\u0114\001\002\000\006\003\u0111\010\u0110\001" +
    "\002\000\010\003\u0112\034\364\046\365\001\002\000\010" +
    "\003\uff8e\006\uff8e\012\uff8e\001\002\000\010\003\uff8f\006" +
    "\uff8f\012\uff8f\001\002\000\010\003\uff90\006\uff90\012\uff90" +
    "\001\002\000\006\034\364\046\365\001\002\000\010\003" +
    "\uff8d\006\uff8d\012\uff8d\001\002\000\016\002\uffe4\003\uffe4" +
    "\011\uffe4\015\uffe4\016\uffe4\047\uffe4\001\002\000\004\002" +
    "\ufffc\001\002\000\016\002\ufff7\003\ufff7\011\ufff7\015\ufff7" +
    "\016\ufff7\047\ufff7\001\002\000\016\002\ufffa\003\ufffa\011" +
    "\ufffa\015\ufffa\016\ufffa\047\ufffa\001\002\000\004\005\023" +
    "\001\002\000\004\013\u011c\001\002\000\026\004\053\011" +
    "\004\021\044\025\u011e\026\061\034\041\036\046\037\037" +
    "\040\033\050\032\001\002\000\004\013\u0124\001\002\000" +
    "\006\003\u0123\015\u0122\001\002\000\004\025\u0120\001\002" +
    "\000\004\015\u0121\001\002\000\004\013\uffde\001\002\000" +
    "\004\013\uffdd\001\002\000\004\013\uffdc\001\002\000\016" +
    "\002\uffe8\003\uffe8\011\uffe8\015\uffe8\016\uffe8\047\uffe8\001" +
    "\002\000\004\013\u0126\001\002\000\010\003\u0128\011\u012b" +
    "\034\u012c\001\002\000\004\013\u013b\001\002\000\006\013" +
    "\ufff2\025\u0133\001\002\000\012\003\u0137\011\u012b\025\uffc9" +
    "\034\u012c\001\002\000\004\025\u0133\001\002\000\004\034" +
    "\u012f\001\002\000\004\010\u012d\001\002\000\006\034\364" +
    "\046\365\001\002\000\004\013\ufff3\001\002\000\004\010" +
    "\u0130\001\002\000\006\034\364\046\365\001\002\000\004" +
    "\013\ufff4\001\002\000\004\013\u0136\001\002\000\006\003" +
    "\u0134\047\u0135\001\002\000\004\013\uffd7\001\002\000\004" +
    "\013\uffd8\001\002\000\016\002\uff5e\003\uff5e\011\uff5e\015" +
    "\uff5e\016\uff5e\047\uff5e\001\002\000\004\013\ufff2\001\002" +
    "\000\004\025\uffca\001\002\000\004\013\u013a\001\002\000" +
    "\016\002\uff5d\003\uff5d\011\uff5d\015\uff5d\016\uff5d\047\uff5d" +
    "\001\002\000\012\003\ufff5\011\ufff5\025\ufff5\034\ufff5\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "\000\004\013\uffee\001\002\000\004\013\ufff1\001\002\000" +
    "\004\010\u0145\001\002\000\010\003\u0142\010\uffed\012\u0143" +
    "\001\002\000\004\010\uffeb\001\002\000\004\034\u0141\001" +
    "\002\000\004\010\uffec\001\002\000\006\034\364\046\365" +
    "\001\002\000\006\012\u0147\013\uffef\001\002\000\006\003" +
    "\u013e\034\u0141\001\002\000\004\013\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\020\004\017\005\004\006\015\010\013\012" +
    "\010\045\006\061\005\001\001\000\006\007\u013e\011\u013f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\017\006\015\010\013\012\u013b\045\006" +
    "\061\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\017\006\015\010\013\012\u0116\045\006\061\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\024\001\001\000\006\016\375\024\u0101\001" +
    "\001\000\002\001\001\000\004\036\027\001\001\000\004" +
    "\037\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\034\010\054\013\047\014\035\015\057\017\044" +
    "\021\046\022\041\027\042\035\051\041\033\042\050\044" +
    "\053\052\055\056\061\057\062\001\001\000\002\001\001" +
    "\000\004\041\353\001\001\000\002\001\001\000\026\003" +
    "\034\013\047\014\035\015\057\017\044\022\344\041\033" +
    "\052\055\056\061\057\062\001\001\000\002\001\001\000" +
    "\006\033\337\041\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\334\001\001\000\002\001\001\000" +
    "\014\023\236\033\104\050\073\051\076\052\102\001\001" +
    "\000\002\001\001\000\006\033\225\041\230\001\001\000" +
    "\030\003\034\013\047\014\035\015\057\017\044\022\222" +
    "\041\033\044\223\052\055\056\061\057\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\054\021\220" +
    "\035\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\023\075\033\104\050\073\051\076\052" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\130\033\104\050\073\051\076\052\102\001" +
    "\001\000\010\033\104\051\127\052\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\110\033\104\034\112\047\111\050\073" +
    "\051\076\052\102\001\001\000\002\001\001\000\006\034" +
    "\115\046\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\104\050\125\051\076\052" +
    "\102\001\001\000\002\001\001\000\012\033\104\050\124" +
    "\051\076\052\102\001\001\000\014\023\122\033\104\050" +
    "\073\051\076\052\102\001\001\000\012\033\104\050\121" +
    "\051\076\052\102\001\001\000\002\001\001\000\006\034" +
    "\115\046\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\023\133\033\104" +
    "\050\073\051\076\052\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\033\104\050\142\051\076\052\102" +
    "\001\001\000\012\033\104\050\141\051\076\052\102\001" +
    "\001\000\012\033\104\050\140\051\076\052\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\023\144\033\104\050\073\051\076\052\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\152\001\001" +
    "\000\002\001\001\000\040\003\034\010\054\013\047\014" +
    "\035\015\057\017\044\021\046\022\041\027\154\035\051" +
    "\041\033\044\053\052\055\056\061\057\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\034\010\054\013\047\014\035\015\057" +
    "\017\044\021\046\022\041\027\164\035\051\041\033\044" +
    "\053\052\055\056\061\057\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\023\213\033\104\050\073\051\076\052" +
    "\102\001\001\000\014\023\176\033\104\050\073\051\076" +
    "\052\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\034\010\054\013\047\014\035\015\057\017\044" +
    "\021\046\022\041\027\202\035\051\041\033\044\053\052" +
    "\055\055\203\056\061\057\062\001\001\000\002\001\001" +
    "\000\004\055\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\034" +
    "\010\054\013\047\014\035\015\057\017\044\021\046\022" +
    "\041\027\210\035\051\041\033\044\053\052\055\055\211" +
    "\056\061\057\062\001\001\000\004\055\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\034\010\054\013\047\014\035\015\057\017\044\021" +
    "\046\022\041\027\215\035\051\041\033\044\053\052\055" +
    "\055\216\056\061\057\062\001\001\000\004\055\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\034\010\054\013\047\014\035\015\057" +
    "\017\044\020\246\021\046\022\041\027\245\035\051\040" +
    "\244\041\033\044\053\052\055\056\061\057\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\276\040\244\001\001\000\002\001\001\000\014" +
    "\023\252\033\104\050\073\051\076\052\102\001\001\000" +
    "\004\040\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\034\010" +
    "\054\013\047\014\035\015\057\017\044\020\257\021\046" +
    "\022\041\027\256\035\051\040\244\041\033\044\053\052" +
    "\055\056\061\057\062\001\001\000\006\020\260\040\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\034\010\054\013\047\014\035\015\057\017\044\020\263" +
    "\021\046\022\041\027\262\035\051\040\244\041\033\044" +
    "\053\052\055\056\061\057\062\001\001\000\006\020\264" +
    "\040\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\034\010\054\013\047\014\035" +
    "\015\057\017\044\020\270\021\046\022\041\027\267\035" +
    "\051\040\244\041\033\044\053\052\055\056\061\057\062" +
    "\001\001\000\006\020\271\040\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\034\010\054\013\047" +
    "\014\035\015\057\017\044\020\274\021\046\022\041\027" +
    "\273\035\051\040\244\041\033\044\053\052\055\056\061" +
    "\057\062\001\001\000\006\020\275\040\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\034\010\054\013\047\014\035\015\057" +
    "\017\044\021\046\022\041\027\305\035\051\040\304\041" +
    "\033\044\053\052\055\056\061\057\062\001\001\000\002" +
    "\001\001\000\004\040\311\001\001\000\004\040\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\003\034\010" +
    "\054\013\047\014\035\015\057\017\044\020\316\021\046" +
    "\022\041\027\315\035\051\040\244\041\033\044\053\052" +
    "\055\056\061\057\062\001\001\000\006\020\317\040\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\034\010\054\013\047\014\035\015\057" +
    "\017\044\020\323\021\046\022\041\027\322\035\051\040" +
    "\244\041\033\044\053\052\055\056\061\057\062\001\001" +
    "\000\006\020\324\040\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\034\010\054\013\047\014\035" +
    "\015\057\017\044\020\327\021\046\022\041\027\326\035" +
    "\051\040\244\041\033\044\053\052\055\056\061\057\062" +
    "\001\001\000\006\020\330\040\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\346\033\104\050\073\051\076\052\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\371\001\001\000\042\003\034\010\054\013\047\014\035" +
    "\015\057\017\044\021\046\022\041\027\042\035\051\041" +
    "\033\042\367\044\053\052\055\056\061\057\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\034\010\054\013\047\014\035\015\057\017\044" +
    "\021\046\022\041\027\042\035\051\041\033\042\373\044" +
    "\053\052\055\056\061\057\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u0105\001\001" +
    "\000\002\001\001\000\004\024\u0107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u010b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u011a\001\001\000\002\001\001\000\042\003\034\010" +
    "\054\013\047\014\035\015\057\017\044\021\046\022\041" +
    "\027\u011e\035\051\041\033\044\053\052\055\053\u011c\056" +
    "\061\057\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\u0128\031\u0129\032\u0126\001\001\000" +
    "\002\001\001\000\004\043\u0138\001\001\000\010\030\u0128" +
    "\031\u0137\032\u0126\001\001\000\004\043\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u012d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0143\001" +
    "\001\000\002\001\001\000\004\037\u0145\001\001\000\002" +
    "\001\001\000\006\007\u0147\011\u013f\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 
    String errores = "";
    Boolean has_main = false;
    Boolean first_run = true; 
    public void report_error(String message, Object info) {
      StringBuffer m = new StringBuffer("Error");
		 if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
        message = message.replaceAll("Syntax error","Error de sintaxis");
 		    m.append(" : "+message);
 
        errores += m;
        errores += "\n";
        System.out.println(m);
 }

    public void report_fatal_error(String message, Object info) {
          message = message.replaceAll("Couldn't repair and continue parse","No se pudo recuperar");
        	report_error(message, info);
        
		System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // dectype ::= TYPE NAME FIN error end_type FIN 
            {
              Object RESULT = null;
		 parser.report_error(" estructura no puede estar vacia",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*dectype*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dectype ::= TYPE NAME FIN list_declar2 end_type FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*dectype*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // rango ::= NAME IGUAL error TO expression 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba valor de inicio",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // rango ::= NAME IGUAL expression TO error 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba valor de final",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // rango ::= NAME IGUAL error TO error 
            {
              Object RESULT = null;
		 parser.report_error("Error de rangos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // rango ::= NAME IGUAL error 
            {
              Object RESULT = null;
		 parser.report_error("Error de rangos/asignacion",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // rango ::= NAME IGUAL error TO 
            {
              Object RESULT = null;
		 parser.report_error("Error de rangos, valor inicial y final",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // rango ::= NAME IGUAL TO error 
            {
              Object RESULT = null;
		 parser.report_error("Error de rangos, no existe valor inicial",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // rango ::= NAME IGUAL expression TO expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*rango*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // loop_for ::= FOR rango FIN bloque error 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba un Next",sym.NEXT); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // loop_for ::= FOR rango FIN error 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba un Next",sym.NEXT); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // loop_for ::= FOR error FIN bloque NEXT FIN 
            {
              Object RESULT = null;
		 parser.report_error("Error en rango",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // loop_for ::= FOR error FIN NEXT FIN 
            {
              Object RESULT = null;
		 parser.report_error("Error en rango",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // loop_for ::= FOR rango FIN NEXT FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // loop_for ::= FOR rango FIN bloque NEXT FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*loop_for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // salir_loop ::= error 
            {
              Object RESULT = null;
		 parser.report_error("se esperaba salida de while",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*salir_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // salir_loop ::= LOOP FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*salir_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // do_loop ::= DO WHILE error FIN bloque salir_loop 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // do_loop ::= DO WHILE error FIN salir_loop 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // do_loop ::= DO error expression FIN salir_loop 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba While <expresion booleana> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // do_loop ::= DO error expression FIN bloque salir_loop 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba While <expresion booleana> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // do_loop ::= DO WHILE expression FIN salir_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // do_loop ::= DO WHILE expression FIN bloque salir_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*do_loop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // salir_if ::= END error 
            {
              Object RESULT = null;
		parser.report_error("Se esperaba End If",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*salir_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // salir_if ::= END IF 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*salir_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // if_inner ::= error salir_if 
            {
              Object RESULT = null;
		 parser.report_error("Error del bloque if, sentencia no esperada",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // if_inner ::= ELSE FIN error salir_if FIN 
            {
              Object RESULT = null;
		 parser.report_error("Sentencia inesperada despues del Else",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // if_inner ::= ELSEIF error THEN FIN bloque if_inner 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // if_inner ::= ELSEIF error FIN bloque if_inner 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // if_inner ::= ELSEIF error THEN FIN if_inner 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if_inner ::= ELSEIF error FIN if_inner 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // if_inner ::= ELSEIF expression THEN FIN if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // if_inner ::= ELSEIF expression FIN if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // if_inner ::= ELSEIF expression THEN FIN bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // if_inner ::= ELSEIF expression FIN bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // if_inner ::= ELSE error 
            {
              Object RESULT = null;
		 parser.report_error("Error en expresion Else",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // if_inner ::= ELSE FIN salir_if FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // if_inner ::= ELSE FIN bloque salir_if FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // if_inner ::= salir_if FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*if_inner*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // if_block ::= IF error THEN FIN bloque if_inner 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // if_block ::= IF error FIN bloque if_inner 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // if_block ::= IF error THEN FIN if_inner 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // if_block ::= IF error FIN if_inner 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba expresion booleana",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // if_block ::= IF expression FIN if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // if_block ::= IF expression THEN FIN if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // if_block ::= IF expression FIN bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // if_block ::= IF expression THEN FIN bloque if_inner 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*if_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // argument ::= error NAME AS tipo 
            {
              Object RESULT = null;
		 parser.report_error("error en argumento, no existe tipo de referencia",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // argument ::= REF error AS tipo 
            {
              Object RESULT = null;
		 parser.report_error(" error en argumento, no existe nombre de argumento",sym.NAME); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // argument ::= REF NAME error 
            {
              Object RESULT = null;
		 parser.report_error(" error en argumento, se esperaba As <un tipo de dato>",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // argument ::= REF NAME AS error 
            {
              Object RESULT = null;
		 parser.report_error(" error en argumento, se esperaba un tipo de dato",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // argument ::= REF NAME AS tipo 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // argumentlistHelper ::= error PARIZQ 
            {
              Object RESULT = null;
		 parser.report_error("error de argumentos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // argumentlistHelper ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // argumentlistHelper ::= SEPARADOR argument argumentlistHelper 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*argumentlistHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // schrodingerArgument ::= error 
            {
              Object RESULT = null;
		 parser.report_error("error de argumentos",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // schrodingerArgument ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // schrodingerArgument ::= argument argumentlistHelper 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*schrodingerArgument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // argumentlist ::= PARDER schrodingerArgument 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*argumentlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // salir_param ::= PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*salir_param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // paramHelper ::= salir_param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*paramHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // paramHelper ::= SEPARADOR expression paramHelper 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*paramHelper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parametros ::= salir_param 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parametros ::= expression paramHelper 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*parametros*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funcionCall ::= NAME PARDER parametros 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*funcionCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cadena_s ::= CADENA SALTOCADENA error 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba nueva cadena",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cadena_s ::= CADENA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cadena_s ::= CADENA SALTOCADENA FIN cadena_s 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*cadena_s*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= funcionCall 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= cadena_s 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= FALSE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= TRUE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= NAME PUNTO NAME 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= NAME 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= NUM 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= NOT factor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= PARDER expression PARIZQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= factor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= factor OPREL termino 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino ::= factor ENTRE termino 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino ::= factor POR termino 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*termino*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression IGUAL termino 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= termino 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression MENOS termino 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression MAS termino 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // nombre ::= NAME PUNTO error 
            {
              Object RESULT = null;
		 parser.report_error(" Error de <id> en asignacion ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // nombre ::= NAME PUNTO NAME 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // nombre ::= NAME 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*nombre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion ::= nombre IGUAL error FIN 
            {
              Object RESULT = null;
		 parser.report_error("No se puede asignar valor, error en expresion ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion ::= nombre IGUAL expression FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*asignacion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lee ::= INPUT error 
            {
              Object RESULT = null;
		 parser.report_error(" Se esperaba variable",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*lee*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lee ::= INPUT nombre FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*lee*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // escribe ::= WRITELN error 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba cadena o variable",sym.WRITELN); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // escribe ::= WRITELN cadena_s FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // escribe ::= WRITELN nombre FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // escribe ::= WRITE error 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba cadena o variable",sym.WRITE);
              CUP$parser$result = new java_cup.runtime.Symbol(44/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // escribe ::= WRITE nombre FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // escribe ::= WRITE cadena_s FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*escribe*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= NAME error 
            {
              Object RESULT = null;
		 parser.report_error(" Expresion no se esperaba.",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= lee 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= escribe 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= funcionCall FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= asignacion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= do_loop 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= loop_for 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= if_block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list_expressions ::= statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*list_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list_expressions ::= statement list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*list_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_declar2 ::= variables_declar2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*list_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_declar2 ::= variables_declar2 list_declar2 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*list_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_declar ::= variables_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*list_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_declar ::= variables_declar list_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*list_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque ::= regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque ::= list_declar regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque ::= list_declar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque ::= list_declar list_expressions regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque ::= list_declar list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloque ::= list_expressions regresar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloque ::= list_expressions 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // regresar ::= EXIT error 
            {
              Object RESULT = null;
		 parser.report_error(" Salida de metodos: se esperaba Exit Sub o Exit Function",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // regresar ::= EXIT FUNCTION FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // regresar ::= EXIT SUB FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*regresar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // end_type ::= END error 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba End Type",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*end_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // end_type ::= END TYPE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*end_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // end_func ::= bloque END error 
            {
              Object RESULT = null;
		 parser.report_error(" Se esperaba End Function", sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // end_func ::= END FUNCTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // end_func ::= bloque END FUNCTION 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*end_func*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // end_sub ::= END error 
            {
              Object RESULT = null;
		 parser.report_error(" Se esperaba End Sub",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // end_sub ::= END SUB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // end_sub ::= bloque END SUB 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*end_sub*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // retorno ::= error 
            {
              Object RESULT = null;
		 parser.report_error(" No existe tipo de retorno de funcion, se esperaba: As <Tipo>",sym.AS); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*retorno*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // retorno ::= AS tipo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*retorno*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion ::= FUNCTION NAME error 
            {
              Object RESULT = null;
		 parser.report_error("Error en firma de funcion",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion ::= FUNCTION NAME error FIN end_func FIN 
            {
              Object RESULT = null;
		 parser.report_error("error de parametros",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion ::= FUNCTION NAME error PARIZQ retorno FIN end_func FIN 
            {
              Object RESULT = null;
		 parser.report_error("error de parametros",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion ::= FUNCTION error FIN 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba nombre de funcion",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion ::= FUNCTION NAME argumentlist retorno FIN end_func FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcion ::= FUNCTION NAME argumentlist retorno FIN error FIN 
            {
              Object RESULT = null;
		 parser.report_error("oh wel",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo ::= funcion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo ::= SUB NAME argumentlist FIN end_sub FIN 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 if (n1.equals("Main")) 
                                                             parser.has_main = true; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= NAME 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= TIPO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vars ::= NAME error 
            {
              Object RESULT = null;
		 parser.report_error("Declaracion de variables: Se esperaba ,",sym.NAME); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vars ::= NAME SEPARADOR vars 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vars ::= NAME 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= error 
            {
              Object RESULT = null;
		 parser.report_error("Declaracion de variables: Se esperaba ID",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= vars AS tipo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= vars AS tipo SEPARADOR declaracion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*declaracion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declar_var ::= DIM declaracion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*declar_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion2 ::= error 
            {
              Object RESULT = null;
		 parser.report_error("Se esperaba <id> As <tipo> ",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion2 ::= NAME AS tipo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion2 ::= DIM NAME AS tipo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*declaracion2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variables_declar2 ::= declaracion2 FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*variables_declar2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables_declar ::= declar_var FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*variables_declar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // linea ::= error FIN 
            {
              Object RESULT = null;
		 parser.report_error(" Se esperaba declaracion de variables, metodos o estructuras",sym.ERROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // linea ::= dectype 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // linea ::= metodo 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // linea ::= declar_var FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*linea*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= linea 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= linea statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= FIN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= FIN statements 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

